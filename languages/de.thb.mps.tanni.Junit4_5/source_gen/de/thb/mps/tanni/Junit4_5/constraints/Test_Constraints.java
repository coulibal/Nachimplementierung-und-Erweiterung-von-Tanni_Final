package de.thb.mps.tanni.Junit4_5.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Test_Constraints extends BaseConstraintsDescriptor {
  public Test_Constraints() {
    super(CONCEPTS.Test$an);
  }

  public static class Description_Property extends BasePropertyConstraintsDescriptor {
    public Description_Property(ConstraintsDescriptor container) {
      super(PROPS.description$g98V, container);
    }
    @Override
    public boolean hasOwnValidator() {
      return true;
    }
    private static final SNodePointer validatePropertyBreakingPoint = new SNodePointer("r:557e0a9c-c4ec-4f71-a83f-85bc810a0eba(de.thb.mps.tanni.Junit4_5.constraints)", "6114418101093839479");
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(validatePropertyBreakingPoint);
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {
      return (propertyValue != null && propertyValue.length() > 0);

    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.description$g98V, new Description_Property(this));
    return properties;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Test$an = MetaAdapterFactory.getConcept(0x95866216e5aa493fL, 0xbb273c6c8066e765L, 0xa9e170e92b24488L, "de.thb.mps.tanni.Junit4_5.structure.Test");
  }

  private static final class PROPS {
    /*package*/ static final SProperty description$g98V = MetaAdapterFactory.getProperty(0x95866216e5aa493fL, 0xbb273c6c8066e765L, 0xa9e170e92b24488L, 0xa9e170e92b2448bL, "description");
  }
}
